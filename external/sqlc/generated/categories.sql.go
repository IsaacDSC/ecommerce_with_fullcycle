// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: categories.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createCategory = `-- name: CreateCategory :exec
INSERT INTO "categories" ("id", "name", "active") VALUES($1, $2, $3)
`

type CreateCategoryParams struct {
	ID     string
	Name   string
	Active sql.NullBool
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) error {
	_, err := q.db.ExecContext(ctx, createCategory, arg.ID, arg.Name, arg.Active)
	return err
}

const getAllCategories = `-- name: GetAllCategories :many
SELECT id, name, active, created_at, updated_at, deleted_at FROM "categories" limit $1
`

func (q *Queries) GetAllCategories(ctx context.Context, limit int32) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getAllCategories, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Active,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryByID = `-- name: GetCategoryByID :one
SELECT id, name, active, created_at, updated_at, deleted_at FROM "categories" WHERE id = $1
`

func (q *Queries) GetCategoryByID(ctx context.Context, id string) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategoryByID, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
