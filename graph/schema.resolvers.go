package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/IsaacDSC/fullcycle_catalog_ecommerce/graph/model"
)

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, input model.NewProduct) (output *model.Product, err error) {
	product := input.ToDomain()
	product, err = r.Repositories.ProductRepository.CreateProduct(ctx, product)
	if err != nil {
		err = errors.New("Internal server error")
	}
	prodModel := new(model.Product)
	output = prodModel.FromDomain(product)
	return
}

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, input model.NewCategory) (output *model.Category, err error) {
	category := input.ToDomain()
	err = r.Repositories.CategoryRepository.CreateCategory(ctx, category)
	if err != nil {
		return
	}
	categoryModel := new(model.Category)
	output = categoryModel.FromDomain(category)
	return
}

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input model.NewOrder) (output *model.Order, err error) {
	if len(input.Items) < 1 {
		return &model.Order{}, errors.New("Required Items")
	}

	productsID := make([]string, len(input.Items))
	for i := range input.Items {
		productsID[i] = input.Items[i].ProductID
	}

	products, err := r.Repositories.OrderRepository.GetProducts(ctx, productsID)
	if err != nil {
		return &model.Order{}, err
	}

	for i := range products {
		if !products[i].Active || (products[i].DeletedAt == time.Time{}) {
			return &model.Order{}, fmt.Errorf("Product not unavailable: %s", products[i].ID)
		}
	}

	domainEntity := input.ToDomain(products)
	if err = domainEntity.Calculate(); err != nil {
		return &model.Order{}, err
	}

	if err = r.Repositories.OrderRepository.CreateOrder(ctx, *domainEntity); err != nil {
		return &model.Order{}, err
	}

	output.PaymentURL = fmt.Sprintf("http://loalhost:3000/payments/%s", domainEntity.ID)

	return
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context) (output []*model.Product, err error) {
	products, err := r.Repositories.ProductRepository.GetProducts(ctx)
	if err != nil {
		err = errors.New("Internal server error")
	}

	prodModel := new(model.Product)
	for i := range products {
		output = append(output, prodModel.FromDomain(products[i]))
	}

	return
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context) (output []*model.Category, err error) {
	categories, err := r.Repositories.CategoryRepository.GetAllCategories(ctx)
	if err != nil {
		err = errors.New("Internal server error")
		return
	}

	categoryModel := new(model.Category)
	for i := range categories {
		output = append(output, categoryModel.FromDomain(categories[i]))
	}
	return
}

// GetProduct is the resolver for the getProduct field.
func (r *queryResolver) GetProduct(ctx context.Context, input *model.RetrieveByID) (output *model.Product, err error) {
	product, err := r.Repositories.ProductRepository.GetProductByID(ctx, input.ID)
	if err != nil {
		return
	}
	prodModel := new(model.Product)
	output = prodModel.FromDomain(product)
	return
}

// GetCategory is the resolver for the getCategory field.
func (r *queryResolver) GetCategory(ctx context.Context, input *model.RetrieveByID) (output *model.Category, err error) {
	category, err := r.Repositories.CategoryRepository.GetCategoryByID(ctx, input.ID)
	if err != nil {
		return
	}
	categoryModel := new(model.Category)
	output = categoryModel.FromDomain(category)
	return
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
